as.data.frame()
ggplot(rmse_350_new, aes(x = k_grid, y = rmse_350_out)) +
geom_line(color = "red") +
labs(x="k", y="RMSE",
title = "Car's trim level 350: RMSE vs value of K >= 2") +
theme_minimal() +
theme(plot.title = element_text(face = "bold"))
# optimal value of K
k_grid[which.min(rmse_350_out)]
# RMSE of optimal K we found
knn_350_RMSE = knnreg(price ~ mileage, data=sclass350_train, k=k_grid[which.min(rmse_350_out)])
rmse(knn_350_RMSE,sclass350_test)
sclass350_test = sclass350_test %>%
mutate(price_pred = predict(knn_350_RMSE, sclass350_test))
ptest = ggplot(data = sclass350_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ggtitle("Predictions of price given mileage")
# now add the predictions
ptest +
geom_line(aes(x = mileage, y = price_pred), color='red', size=1.5) +
theme_minimal() +
theme(plot.title = element_text(face="bold"))
Trim_350_row=length(which(sclass$trim=="350"))
Trim_65_row=length(which(sclass$trim=="65 AMG"))
df<- data.frame(Trim_350_row,Trim_65_row, row.names = "Number of rows")
knitr::kable(head(df, 1), col.names = c("Trim 350", "Trim 65 AMG"))
## Q3
# 350
class_350 <- sclass %>%
filter(trim == "350")
olympics_top20 <- read.csv("C:/Users/USER/ECO395M-1/data/olympics_top20.csv")
View(olympics_top20)
## Q2 (b)
gender2 <- olympics_top20 %>%
filter(sex == "F") %>%
select(event, height) %>%
group_by(event) %>%
summarize(sd_height = sd(height)) %>%
arrange(desc(sd_height)) %>%
head()
gender2
## Q2 (c)
age <- olympics_top20 %>%
filter(sport == "Swimming") %>%
group_by(year) %>%
summarize(mean_age = mean(age))
ggplot(age) +
geom_line(aes(x = year, y = mean_age)) +
labs(x="Year", y = "Average Age",
title="Average Age of Olympic Swimmers Changed Over Time")
#
agetest <- olympics_top20 %>%
filter(sport == "Swimming") %>%
group_by(sex, year) %>%
summarize(mean_age = mean(age))
ggplot(agetest) +
geom_line(aes(x = year, y = mean_age, color = sex)) +
labs(x="Year", y = "Average Age",
title="Average Age of Male/Female
Olympic Swimmers Changed Over Time")
Olympics_swimmerage = Olympics %>%
filter(sport=="Swimming") %>%
group_by(sex,year) %>%
summarise(Meanage=mean(age)) %>% as.data.frame()
Olympics_swimmerage = olympics_top20 %>%
filter(sport=="Swimming") %>%
group_by(sex,year) %>%
summarise(Meanage=mean(age)) %>% as.data.frame()
# Plot the data with line graph
ggplot(Olympics_swimmerage,aes(x=year, y=Meanage,color=sex))+
geom_line() + geom_point() +
labs(title="Change in Average Age for Male and Female Swimmers",
x="Year",
y="Average age") +
#subtitle="(Year 1896 Olympic Medalist)") +
theme_classic() +
theme(plot.title = element_text(face="bold"))
## Q2 (c)
age <- olympics_top20 %>%
filter(sport == "Swimming") %>%
group_by(year) %>%
summarize(mean_age = mean(age))
ggplot(age) +
geom_line(aes(x = year, y = mean_age)) +
labs(x="Year", y = "Average Age",
title="Average Age of Olympic Swimmers Changed Over Time")
#
agetest <- olympics_top20 %>%
filter(sport == "Swimming") %>%
group_by(sex, year) %>%
summarize(mean_age = mean(age))
ggplot(agetest) +
geom_line(aes(x = year, y = mean_age, color = sex)) +
labs(x="Year", y = "Average Age",
title="Average Age of Male/Female
Olympic Swimmers Changed Over Time")
ABIA <- read.csv("C:/Users/USER/ECO395M-1/data/ABIA.csv")
View(ABIA)
library(ggplot2)
library(tidyverse)
##
month = ABIA %>% group_by(Month)
adj_Month <- replace(month, is.na(Month), 0)
rank <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.95)
) %>%
round(2)
##
mon = ABIA %>% group_by(UniqueCarrier)
adj_mon <- replace(mon, is.na(Month), 0)
adj_mon
ggplot(aes(x = UniqueCarrier, y = ((ArrDelay + DepDelay)/Distance,), data = rank) +
adj_Month <- replace(month, is.na(month), 0)
rank <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.95)
) %>%
round(2)
rank
ggplot(rank) +
geom_col(aes(x=factor(Month), y=avg_Delay))  +
labs(x="Month",
y="Average delay time",
title="Average Arrival + Departure Delay Time by Month")
ggplot(rank) +
geom_col(aes(x=factor(Month), y=avg_Delay))  +
labs(x="Month",
y="time",
title="Average Arrival + Departure Delay Time by Month")
ggplot(rank) +
geom_col(aes(x=factor(Month), y=avg_Delay))  +
labs(x="Month",
y="Time",
title="Average of Arrival + Departure Delay Time by Month")
##
mon = ABIA %>% group_by(UniqueCarrier)
adj_mon <- replace(mon, is.na(month), 0)
adj_mon
brand <- adj_mon %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.95)
) %>%
round(2)
##
mon = ABIA %>% group_by(UniqueCarrier)
adj_mon <- replace(mon, is.na(month), 0)
adj_mon
brand <- adj_mon %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.95)
) %>%
round(2)
ggplot(aes(x = UniqueCarrier, y = ((ArrDelay + DepDelay)/Distance,), data = rank) +
ggplot(aes(x = Month, y = ((ArrDelay + DepDelay)/Distance,), data = rank) +
##
mon = ABIA %>% group_by(UniqueCarrier)
adj_mon <- replace(mon, is.na(month), 0)
adj_mon
geom_boxplot() +
theme_bw()
facet_wrap(~ UniqueCarrier)
facet_wrap(~UniqueCarrier)
## What is the best Month to fly to minimize delays
month = ABIA %>% group_by(Month)
adj_Month <- replace(month, is.na(month), 0)
rank <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.95)
) %>%
round(2)
ggplot(rank) +
geom_col(aes(x=factor(Month), y=avg_Delay))  +
labs(x="Month",
y="Minutes",
title="Average of Arrival + Departure Delay Time by Month")
rank
rank <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay)/Distance, 0.95)
) %>%
round(3)
rank
rank <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay + WeatherDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay + WeatherDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay + WeatherDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay + WeatherDelay)/Distance, 0.95)
) %>%
round(3)
rank
ggplot(rank) +
geom_col(aes(x=factor(Month), y=avg_Delay))  +
labs(x="Month",
y="Minutes",
title="Average of Arrival + Departure Delay Time by Month")
month = ABIA %>% group_by(Month)
adj_Month <- replace(month, is.na(month), 0)
rank <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay + WeatherDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay + WeatherDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay + WeatherDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay + WeatherDelay)/Distance, 0.95)
) %>%
round(3)
rank
ggplot(rank) +
geom_col(aes(x=factor(Month), y=avg_Delay))  +
labs(x="Month",
y="Minutes",
title="Average Delay Time per mile by Month")
##
ggplot(rank) +
geom_boxplot(aes(x = factor(Month), y = avg_Delay)) +
facet_wrap(~UniqueCarrier)
##
ggplot(rank) +
geom_boxplot(aes(x = factor(Month), y = avg_Delay)) +
facet_wrap(~FlightNum)
rank
## affected by airline?
month = ABIA %>% group_by(Month, FlightNum)
adj_Month <- replace(month, is.na(month), 0)
rank2 <- adj_Month %>%
summarize(avg_Delay = mean((ArrDelay + DepDelay + WeatherDelay)/Distance),
sd_Delay = sd((ArrDelay + DepDelay + WeatherDelay)/Distance),
q05_Delay = quantile((ArrDelay + DepDelay + WeatherDelay)/Distance, 0.05),
q95_Delay = quantile((ArrDelay + DepDelay + WeatherDelay)/Distance, 0.95)
) %>%
round(3)
ggplot(rank2) +
geom_boxplot(aes(x = factor(Month), y = avg_Delay)) +
facet_wrap(~FlightNum)
rank2
rank2
## affected by airline?
month = ABIA %>% group_by(Month, FlightNum)
month = ABIA %>% group_by(Month, FlightNum)
get wd
getwd("C:\Users\USER\Data_Mining\Exercise 2")
getwd("C:\\Users\\USER\\Data_Mining\\Exercise 2")
setwd("C:\Users\USER\Data_Mining\Exercise 2")
setwd("C:\\Users\\USER\\Data_Mining\\Exercise 2")
getwd("C:\Users\\USER\\Data_Mining\\Exercise 2")
getwd("C:\\Users\\USER\\Data_Mining\\Exercise 2")
getwd
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(rsample)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(dplyr)
german= read.csv("Data\\german_credit.csv")
german_credit <- read.csv("C:/Users/USER/Data_Mining/Exercise 2/Data/german_credit.csv")
View(german_credit)
default_by_history <- aggregate(default ~ history, data = german, FUN = mean)
default_by_history <- aggregate(Default ~ history, data = german, FUN = mean)
ggplot(default_by_history, aes(x = history, y = Default, fill = history)) +
geom_bar(stat = "identity") +
labs(x = "Credit History", y = "Default Probability", title = "Default Probability by Credit History") +
theme_bw()
german$history <- factor(german$history)
german$purpose <- factor(german$purpose)
set.seed(123) # set random seed for reproducibility
trainIndex <- createDataPartition(german$Default, p = 0.7, list = FALSE)
train <- credit_data[trainIndex,]
train <- german[trainIndex,]
test <- german[-trainIndex,]
model <- glm(default ~ duration + amount + installment + age + history + purpose + foreign, data = train, family = binomial)
model <- glm(Default ~ duration + amount + installment + age + history + purpose + foreign, data = train, family = binomial)
pred <- predict(model, newdata = test, type = "response")
library(pROC)
roc <- roc(test$Default, pred)
auc(roc) # area under the ROC curve
library(gamlr)
library(gamlr)
library(tidyverse)
goal = read.csv("../data/hockey/goal.csv", row.names=1)
head(goal, 10)
# data on situation, teams, and players on the ice
# these are stored in a sparse matrix format called "Matrix market" (MM)
config = readMM("../data/hockey/config.mtx")
team = readMM("../data/hockey/team.mtx")
player = readMM("../data/hockey/player.mtx")
# read in the column names
colnames(config) = scan('../data/hockey/config_names.txt', what='char', sep="\n")
colnames(team) = scan('../data/hockey/team_names.txt', what='char', sep="\n")
colnames(player) = scan('../data/hockey/player_names.txt', what='char', sep="\n")
# +1 for home team, -1 for visiting team
team[1:30, 1:50]
player[1:7, 1:40]
image(player[1:7, 1:40], asp=0.6)
# set up x and y: we'll first fit a model with player effects only,
# focusing on full-strength, normal game situation goals
# but we'll put a lasso penalty on the player coefficients
head(config,10)
full_strength_goals = which(rowSums(config) == 0)
length(full_strength_goals)
# set up x and y inputs
x0 = player[full_strength_goals,]
y0 = goal$homegoal[full_strength_goals]
fit0 = cv.gamlr(x0, y0, nfold=10, verb=TRUE,
standardize=FALSE, family="binomial")
plot(fit0)
beta_hat = coef(fit0)
head(beta_hat)
# Look at the players
player_pm_logit = coef(fit0)[colnames(player),]  %>%
sort(., decreasing=TRUE)
head(player_pm_logit, 25)
sum(player_pm_logit != 0)
# Now a model where we include "game configuration" effects,
# i.e. whether the home or away team has a power-play advantage
# this will allow us to use all goals, not just full-strength goals
x = cbind(config,player)
y = goal$homegoal
## fit the plus-minus regression model
## note: non-player effects are unpenalized
## use the `free` flag to encode this
fit = cv.gamlr(x, y, nfold=10, verb=TRUE,
free=1:ncol(config), standardize=FALSE, family="binomial")
# the CV error plot vs lambda
plot(fit)
# the game-configuration effects
beta_hat[colnames(config),]
# the player effects
beta_hat = coef(fit)
head(beta_hat, 50)
# now the player-only effects
player_pm_logit = coef(fit, select='1se')[colnames(player),] %>%
sort(., decreasing=TRUE)
head(player_pm_logit, 25) %>% exp()
sum(player_pm_logit != 0)  # a lot more are detectably non-zero (more goals!)
lm_history = lm(history ~ duration + amount + installment + age + history + purpose + foreign, data=german)
coef(lm_history) %>% round(3)
table(german$history)
phat_train_history = predict(lm_history, german)
yhat_train_history = ifelse(phat_train_history > 0.5, 1, 0)
confusion_in = table(y = german$history, yhat = yhat_train_history)
confusion_in
sum(diag(confusion_in))/sum(confusion_in)
table(german$history)
confusion_in
lm_history = lm(Default ~ duration + amount + installment + age + history + purpose + foreign, data=german)
coef(lm_history) %>% round(3)
confusion_in = table(y = german$Default, yhat = yhat_train_history)
confusion_in
sum(diag(confusion_in))/sum(confusion_in)
coef(lm_history) %>% round(3)
phat_test_history = predict(lm_history, german)
yhat_test_history = ifelse(phat_test_history > 0.5, 1, 0)
confusion_out = table(y = german$Default, yhat = yhat_test_history)
confusion_out
sum(diag(confusion_out))/sum(confusion_out)
sum(diag(confusion_in))/sum(confusion_in)
sum(diag(confusion_out))/sum(confusion_out)
table(german$history)
phat_train_history = predict(lm_history, german)
yhat_train_history = ifelse(phat_train_history > 0.5, 1, 0)
default_prob <- german %>%
group_by(history) %>%
summarize(default_prob = mean(Default))
# Create a bar plot
ggplot(default_prob, aes(x = history, y = default_prob)) +
geom_bar(stat = "identity") +
labs(x = "Credit History", y = "Default Probability")
model <- glm(default ~ duration + amount + installment + age + history + purpose + foreign, data = credit, family = binomial)
model <- glm(Default ~ duration + amount + installment + age + history + purpose + foreign, data = credit, family = binomial)
model <- glm(Default ~ duration + amount + installment + age + history + purpose + foreign, data = german, family = binomial)
summary(model)
prediction <- predict(model, newdata = german, type = "response")
prediction
# Create a table of counts of defaults by credit history
default_table <- table(german$history, german$Default)
# Calculate the default probabilities
default_probs <- apply(default_table, 1, function(x) x[2]/sum(x))
# Create the bar plot
barplot(default_probs,
main = "Default Probability by Credit History",
xlab = "Credit History",
ylab = "Default Probability",
col = c("green", "yellow", "red"),
names.arg = c("Good", "Poor", "Terrible"))
credit <- read.csv("Data\\german_credit.csv")
default_data <- credit[credit$default == 1,]
# Create a table of counts of defaults by credit history
default_table <- table(default_data$history)
# Calculate the default probabilities
default_probs <- default_table / sum(default_table)
# Create the bar plot
barplot(default_probs,
main = "Probability of Default by Credit History",
xlab = "Credit History",
ylab = "Probability of Default",
col = c("green", "yellow", "red"),
names.arg = c("Good", "Poor", "Terrible"))
default_data <- credit[credit$Default == 1,]
# Create a table of counts of defaults by credit history
default_table <- table(default_data$history)
# Calculate the default probabilities
default_probs <- default_table / sum(default_table)
# Create the bar plot
barplot(default_probs,
main = "Probability of Default by Credit History",
xlab = "Credit History",
ylab = "Probability of Default",
col = c("green", "yellow", "red"),
names.arg = c("Good", "Poor", "Terrible"))
# Convert the "history" and "purpose" variables to dummy variables
credit2 <- cbind(credit, model.matrix(~ history + purpose, data = credit))
credit2$history <- NULL
credit2$purpose <- NULL
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit[,c("duration", "amount", "installment", "age", "historyGood", "historyPoor", "historyTerrible", "purposeCar", "purposeDomestic Appliances", "purposeEducation", "purposeFurniture", "purposeOthers", "purposeRadio/TV", "purposeRepairs", "purposeVacation/others", "foreign", "default")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "historyGood", "historyPoor", "historyTerrible", "purposeCar", "purposeDomestic Appliances", "purposeEducation", "purposeFurniture", "purposeOthers", "purposeRadio/TV", "purposeRepairs", "purposeVacation/others", "foreign", "default")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "history==Good", "history==Poor", "history==Terrible", "purposeCar", "purposeDomestic Appliances", "purposeEducation", "purposeFurniture", "purposeOthers", "purposeRadio/TV", "purposeRepairs", "purposeVacation/others", "foreign", "default")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "history==Good", "history==Poor", "history==Terrible", "purpose", "foreign")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "histor", "history", "history", "purpose", "foreign")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "history", "purpose", "foreign")]
# Convert the "history" and "purpose" variables to dummy variables
credit2 <- cbind(credit, model.matrix(~ history + purpose, data = credit))
credit2$history <- NULL
credit2$purpose <- NULL
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "history", "purpose", "foreign")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "history", "purpose", "foreign")]
credit2
credit2$foreign <- NULL
# Convert the "history" and "purpose" variables to dummy variables
credit2 <- cbind(credit, model.matrix(~ history + purpose + foreign, data = credit))
credit2$history <- NULL
credit2$purpose <- NULL
credit2$foreign <- NULL
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2[,c("duration", "amount", "installment", "age", "history", "purpose", "foreign")]
# Subset the data to only include the variables we want to use in the model
credit_subset <- credit2 %>% select("duration", "amount", "installment", "age", "history", "purpose", "foreign")
# Fit a logistic regression model
model <- glm(Default ~ duration + amount + installment + age + history + purpose + foreign, data = credit, family = binomial)
# Print the model summary
summary(model)
data <- read.csv("Data\\german_credit.csv")
set.seed(123)
train_index <- sample(nrow(data), nrow(data) * 0.7)
train <- data[train_index, ]
test <- data[-train_index, ]
model <- glm(Default ~ duration + amount + installment + age + history + purpose + foreign, data = train, family = "binomial")
summary(model)
probabilities <- predict(model, newdata = test, type = "response")
predictions <- ifelse(probabilities > 0.5, 1, 0)
table(predictions, test$Default)
table(predictions, test$Default)
```
table(predictions, test$Default)
25/38 =
```
25/38
table(predictions, test$Default)
71/262
table(predictions, test$Default)
71/96
table(predictions, test$Default)
default_data <- credit %>%
group_by(history) %>%
summarize(mean_default = mean(Default))
+ labs(y = "Probability of Default",
x = "Credit History",
title = "Probability of Default by Credit History")
+ geom_bar(stat = identity) +
labs(y = "Probability of Default",
x = "Credit History",
title = "Probability of Default by Credit History")
ggplot(default_data, aes(x = history, y = mean.default) ) + geom_bar(stat = identity) + labs(y = "Probability of Default",
x = "Credit History",
title = "Probability of Default by Credit History")
ggplot(default_data, aes(x = history, y = mean.default) ) + geom_bar(stat = "identity") + labs(y = "Probability of Default",
x = "Credit History",
title = "Probability of Default by Credit History")
ggplot(default_data, aes(x = history, y = mean.default) ) + geom_bar(stat = "identity") + labs(y = "Probability of Default",
x = "Credit History",
title = "Probability of Default by Credit History") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
ggplot(default_data, aes(x = history, y = mean_default) ) + geom_bar(stat = "identity") + labs(y = "Probability of Default",
x = "Credit History",
title = "Probability of Default by Credit History") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Create the bar plot
ggplot(default_data, aes(x = history, y = mean_default) ) + geom_bar(stat = "identity") + labs(y = "Probability of Default",
x = "Class of Credit History",
title = "Probability of Default by Credit History") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
